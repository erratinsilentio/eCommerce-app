import { CombinedField } from '../builder/CombinedField';
import { Mutation } from '../builder/Mutation';
import { Query } from '../builder/Query';
import { AbstractField } from '../builder/AbstractField';
import { DataType } from '../util/data-type';
export interface GraphQlResponse {
    errors: string | Error | Error[];
    data: unknown;
}
export declare type Middleware = (response: GraphQlResponse) => unknown;
export declare type RequestOptions = {
    endpoint: string;
    headers?: Record<string, string>;
} & Omit<RequestInit, 'method' | 'body' | 'headers'>;
export declare const defaultOptions: RequestOptions;
export declare class Client {
    protected options: RequestOptions;
    setEndpoint: (endpoint: string) => void;
    setHeaders: (headers: Record<string, string>) => void;
    getOptions: () => RequestOptions;
    post<N extends string, RT, A extends boolean>(rawField: Query<N, RT, A> | Mutation<N, RT, A>, overrideOptions?: Partial<RequestOptions>): Promise<DataType<typeof rawField>>;
    post<RT>(rawField: CombinedField<RT>, overrideOptions?: Partial<RequestOptions>): Promise<DataType<typeof rawField>>;
    /**
     * Handles calculating and transforming fields on result
     */
    protected process(field: AbstractField<any, any, any>, result: any, parentResult: any): Promise<void>;
}
