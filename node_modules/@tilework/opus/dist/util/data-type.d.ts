import { CombinedField } from "../builder/CombinedField";
import { AbstractField } from "../builder/AbstractField";
import { DeepReadonly } from "./deep-readonly";
export declare type DataType<T extends AbstractField<any, any, any> | CombinedField<any>> = T extends AbstractField<infer N, infer RT, infer A> ? DeepReadonly<{
    [k in N]: A extends true ? RT[] : RT;
}> : T extends CombinedField<infer RT> ? DeepReadonly<RT> : never;
