import { Mutation } from './Mutation';
import { Query } from './Query';
import { GraphQlRequestType } from '../client/prepare-document';
import { AbstractField } from './AbstractField';
export declare class CombinedField<ReturnType> {
    type?: GraphQlRequestType;
    resultTypeHolder?: ReturnType;
    protected fields: AbstractField<any, any, any>[];
    add<Name extends string, FieldReturnType, IsArray extends boolean>(field: Query<Name, FieldReturnType, IsArray> | Mutation<Name, FieldReturnType, IsArray>): CombinedField<ReturnType & {
        [k in Name]: IsArray extends true ? FieldReturnType[] : FieldReturnType;
    }>;
    getFields: () => AbstractField<any, any, any>[];
}
