{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser } from \"../parser/index.js\";\nimport { Query } from \"../components/index.js\";\nimport { getDisplayName, GraphQLBase, calculateVariablesFromProps, defaultMapPropsToOptions, defaultMapPropsToSkip } from \"./hoc-utils.js\";\nexport function withQuery(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var operation = parser(document);\n  var _a = operationOptions.options,\n      options = _a === void 0 ? defaultMapPropsToOptions : _a,\n      _b = operationOptions.skip,\n      skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n      _c = operationOptions.alias,\n      alias = _c === void 0 ? 'Apollo' : _c;\n  var mapPropsToOptions = options;\n\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = function () {\n      return options;\n    };\n  }\n\n  var mapPropsToSkip = skip;\n\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = function () {\n      return skip;\n    };\n  }\n\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = \"\".concat(alias, \"(\").concat(getDisplayName(WrappedComponent), \")\");\n\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n\n      function GraphQL() {\n        return _super !== null && _super.apply(this, arguments) || this;\n      }\n\n      GraphQL.prototype.render = function () {\n        var _this = this;\n\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : __assign({}, mapPropsToOptions(props));\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return React.createElement(Query, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          query: document\n        }), function (_a) {\n          var _b, _c;\n\n          var _ = _a.client,\n              data = _a.data,\n              r = __rest(_a, [\"client\", \"data\"]);\n\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}","map":{"version":3,"mappings":"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","names":["React","hoistNonReactStatics","parser","Query","getDisplayName","GraphQLBase","calculateVariablesFromProps","defaultMapPropsToOptions","defaultMapPropsToSkip","withQuery","document","operationOptions","operation","_a","_b","skip","_c","alias","mapPropsToOptions","options","mapPropsToSkip","lastResultProps","WrappedComponent","graphQLDisplayName","concat","__extends","GraphQL","props","shouldSkip","opts","Object","create","__assign","variables","length","displayName","query","_","data","r","withRef","_this","assign","ref","setWrappedInstance","result","name","childProps","newResult"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/node_modules/@apollo/src/react/hoc/query-hoc.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { parser } from '../parser';\nimport { BaseQueryOptions } from '../types/types';\nimport { Query } from '../components';\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withQuery<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo'\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function') {\n    mapPropsToOptions = () => options as BaseQueryOptions;\n  }\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') {\n    mapPropsToSkip = () => skip as any;\n  }\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<TProps, TChildProps> {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : { ...mapPropsToOptions(props) };\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return (\n          <Query\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            query={document}\n          >\n            {({ client: _, data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...(props as TProps)}\n                    {...({} as TChildProps)}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...(props as TProps)}\n                  {...(childProps as TChildProps)}\n                />\n              );\n            }}\n          </Query>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n"]},"metadata":{},"sourceType":"module"}