{"ast":null,"code":"import { gql } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nconst URL = 'http://localhost:4000/';\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: _ref => {\n    let {\n      networkError,\n      graphQLErrors\n    } = _ref;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nconst GET_DATA = gql`\nquery GetData {\n    categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }\n`;\nconst newData = client.query({\n  query: gql`\n    query GetData {\n        categories {\n        name\n        products{\n          name\n          id\n          category\n          inStock\n          description\n          brand\n          gallery\n          attributes{\n           name\n            id\n            type\n            items{\n              id\n              value\n              displayValue\n            }\n          }\n          prices{\n            currency{\n              label\n              symbol\n            }\n            amount\n            \n          } \n        }\n      }\n    \n        currencies{\n          label\n          symbol\n        }\n      }\n    `\n}).then(result => console.log(result));\nconst dataQuery = `\n  categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }`;\n\nconst fetchData = async () => {\n  const result = await fetch(URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: dataQuery\n    })\n  });\n  const resultData = await result.json();\n  const finalData = await resultData.data;\n  return finalData;\n};\n\nasync function data() {\n  const result = await client.query({\n    query: gql`\n      query GetData {\n          categories {\n          name\n          products{\n            name\n            id\n            category\n            inStock\n            description\n            brand\n            gallery\n            attributes{\n             name\n              id\n              type\n              items{\n                id\n                value\n                displayValue\n              }\n            }\n            prices{\n              currency{\n                label\n                symbol\n              }\n              amount\n              \n            } \n          }\n        }\n      \n          currencies{\n            label\n            symbol\n          }\n        }\n      `\n  });\n  return result;\n}\n\nexport { GET_DATA, newData, fetchData };","map":{"version":3,"names":["gql","ApolloClient","InMemoryCache","ApolloProvider","URL","client","uri","cache","onError","networkError","graphQLErrors","console","log","GET_DATA","newData","query","then","result","dataQuery","fetchData","fetch","method","headers","body","JSON","stringify","resultData","json","finalData","data"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/data.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst URL = 'http://localhost:4000/';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/',\n    cache: new InMemoryCache(),\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log('graphQLErrors', graphQLErrors)\n      console.log('networkError', networkError)\n    }\n  });\n\nconst GET_DATA = gql`\nquery GetData {\n    categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }\n`;\n\n\nconst newData =\nclient\n  .query({\n    query: gql`\n    query GetData {\n        categories {\n        name\n        products{\n          name\n          id\n          category\n          inStock\n          description\n          brand\n          gallery\n          attributes{\n           name\n            id\n            type\n            items{\n              id\n              value\n              displayValue\n            }\n          }\n          prices{\n            currency{\n              label\n              symbol\n            }\n            amount\n            \n          } \n        }\n      }\n    \n        currencies{\n          label\n          symbol\n        }\n      }\n    `,\n  })\n  .then(result => console.log(result))\n\n\n  const dataQuery = `\n  categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }`\n\n  const fetchData = async () => {\n    const result = await fetch(URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n  \n      body: JSON.stringify({\n        query: dataQuery,\n      }),\n    });\n  \n    const resultData = await result.json();\n    const finalData = await resultData.data;\n    return finalData;\n  };\n  \n\nasync function data() {\n    const result = await client\n    .query({\n      query: gql`\n      query GetData {\n          categories {\n          name\n          products{\n            name\n            id\n            category\n            inStock\n            description\n            brand\n            gallery\n            attributes{\n             name\n              id\n              type\n              items{\n                id\n                value\n                displayValue\n              }\n            }\n            prices{\n              currency{\n                label\n                symbol\n              }\n              amount\n              \n            } \n          }\n        }\n      \n          currencies{\n            label\n            symbol\n          }\n        }\n      `,\n    })\n\n    return result;\n}\nexport  {GET_DATA, newData, fetchData};"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;AAEA,MAAMC,GAAG,GAAG,wBAAZ;AAEA,MAAMC,MAAM,GAAG,IAAIJ,YAAJ,CAAiB;EAC5BK,GAAG,EAAE,wBADuB;EAE5BC,KAAK,EAAE,IAAIL,aAAJ,EAFqB;EAG5BM,OAAO,EAAE,QAAqC;IAAA,IAApC;MAAEC,YAAF;MAAgBC;IAAhB,CAAoC;IAC5CC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;IACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;EACD;AAN2B,CAAjB,CAAf;AASA,MAAMI,QAAQ,GAAGb,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAtCA;AAyCA,MAAMc,OAAO,GACbT,MAAM,CACHU,KADH,CACS;EACLA,KAAK,EAAEf,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCS,CADT,EA0CGgB,IA1CH,CA0CQC,MAAM,IAAIN,OAAO,CAACC,GAAR,CAAYK,MAAZ,CA1ClB,CADA;AA8CE,MAAMC,SAAS,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IApCE;;AAsCA,MAAMC,SAAS,GAAG,YAAY;EAC5B,MAAMF,MAAM,GAAG,MAAMG,KAAK,CAAChB,GAAD,EAAM;IAC9BiB,MAAM,EAAE,MADsB;IAE9BC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFqB;IAM9BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBV,KAAK,EAAEG;IADY,CAAf;EANwB,CAAN,CAA1B;EAWA,MAAMQ,UAAU,GAAG,MAAMT,MAAM,CAACU,IAAP,EAAzB;EACA,MAAMC,SAAS,GAAG,MAAMF,UAAU,CAACG,IAAnC;EACA,OAAOD,SAAP;AACD,CAfD;;AAkBF,eAAeC,IAAf,GAAsB;EAClB,MAAMZ,MAAM,GAAG,MAAMZ,MAAM,CAC1BU,KADoB,CACd;IACLA,KAAK,EAAEf,GAAI;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EAvCW,CADc,CAArB;EA2CA,OAAOiB,MAAP;AACH;;AACD,SAASJ,QAAT,EAAmBC,OAAnB,EAA4BK,SAA5B"},"metadata":{},"sourceType":"module"}