{"ast":null,"code":"import { gql } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst axios = require(\"axios\");\n\nconst GET_CURRENCIES = gql`\n{\n  currencies{\n    label\n    symbol\n  }\n}`;\nconst GET_CATEGORIES = gql`\n {\n    categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n  }\n`;\nconst URL = 'http://localhost:4000/';\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: _ref => {\n    let {\n      networkError,\n      graphQLErrors\n    } = _ref;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nconst newData = client.query({\n  query: gql`\n    query GetData {\n        categories {\n        name\n        products{\n          name\n          id\n          category\n          inStock\n          description\n          brand\n          gallery\n          attributes{\n           name\n            id\n            type\n            items{\n              id\n              value\n              displayValue\n            }\n          }\n          prices{\n            currency{\n              label\n              symbol\n            }\n            amount\n            \n          } \n        }\n      }\n    \n        currencies{\n          label\n          symbol\n        }\n      }\n    `\n});\nconst dataQuery = `\n  categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }`;\n\nconst fetchData = async () => {\n  const result = await fetch(URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: dataQuery\n    })\n  });\n  const resultData = await result.json();\n  const finalData = await resultData.data;\n  return finalData;\n}; //   const getAll = () => {\n//     const request = axios.get(baseUrl);\n//     return request.then((response) => response.data);\n//   };\n\n\nexport { GET_CATEGORIES, GET_CURRENCIES, newData };","map":{"version":3,"names":["gql","ApolloClient","InMemoryCache","ApolloProvider","axios","require","GET_CURRENCIES","GET_CATEGORIES","URL","client","uri","cache","onError","networkError","graphQLErrors","console","log","newData","query","dataQuery","fetchData","result","fetch","method","headers","body","JSON","stringify","resultData","json","finalData","data"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/data.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nconst axios = require(\"axios\");\n\nconst GET_CURRENCIES = gql`\n{\n  currencies{\n    label\n    symbol\n  }\n}`\n\nconst GET_CATEGORIES = gql`\n {\n    categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n  }\n`;\n\n\n\nconst URL = 'http://localhost:4000/';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/',\n    cache: new InMemoryCache(),\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log('graphQLErrors', graphQLErrors)\n      console.log('networkError', networkError)\n    }\n  });\n\n\n\nconst newData =\nclient\n  .query({\n    query: gql`\n    query GetData {\n        categories {\n        name\n        products{\n          name\n          id\n          category\n          inStock\n          description\n          brand\n          gallery\n          attributes{\n           name\n            id\n            type\n            items{\n              id\n              value\n              displayValue\n            }\n          }\n          prices{\n            currency{\n              label\n              symbol\n            }\n            amount\n            \n          } \n        }\n      }\n    \n        currencies{\n          label\n          symbol\n        }\n      }\n    `,\n  })\n  \n\n\n  const dataQuery = `\n  categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }`\n\n  const fetchData = async () => {\n    const result = await fetch(URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n  \n      body: JSON.stringify({\n        query: dataQuery,\n      }),\n    });\n  \n    const resultData = await result.json();\n    const finalData = await resultData.data;\n    return finalData;\n  };\n\n//   const getAll = () => {\n//     const request = axios.get(baseUrl);\n//     return request.then((response) => response.data);\n//   };\n  \n\n\nexport  {GET_CATEGORIES, GET_CURRENCIES, newData };"],"mappings":"AAAA,SAASA,GAAT,QAAoB,gBAApB;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,cAAtC,QAA4D,gBAA5D;;AACA,MAAMC,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AAEA,MAAMC,cAAc,GAAGN,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA,EANA;AAQA,MAAMO,cAAc,GAAGP,GAAI;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAjCA;AAqCA,MAAMQ,GAAG,GAAG,wBAAZ;AAEA,MAAMC,MAAM,GAAG,IAAIR,YAAJ,CAAiB;EAC5BS,GAAG,EAAE,wBADuB;EAE5BC,KAAK,EAAE,IAAIT,aAAJ,EAFqB;EAG5BU,OAAO,EAAE,QAAqC;IAAA,IAApC;MAAEC,YAAF;MAAgBC;IAAhB,CAAoC;IAC5CC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;IACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;EACD;AAN2B,CAAjB,CAAf;AAWA,MAAMI,OAAO,GACbR,MAAM,CACHS,KADH,CACS;EACLA,KAAK,EAAElB,GAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvCS,CADT,CADA;AA8CE,MAAMmB,SAAS,GAAI;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IApCE;;AAsCA,MAAMC,SAAS,GAAG,YAAY;EAC5B,MAAMC,MAAM,GAAG,MAAMC,KAAK,CAACd,GAAD,EAAM;IAC9Be,MAAM,EAAE,MADsB;IAE9BC,OAAO,EAAE;MACP,gBAAgB;IADT,CAFqB;IAM9BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACnBT,KAAK,EAAEC;IADY,CAAf;EANwB,CAAN,CAA1B;EAWA,MAAMS,UAAU,GAAG,MAAMP,MAAM,CAACQ,IAAP,EAAzB;EACA,MAAMC,SAAS,GAAG,MAAMF,UAAU,CAACG,IAAnC;EACA,OAAOD,SAAP;AACD,CAfD,C,CAiBF;AACA;AACA;AACA;;;AAIA,SAASvB,cAAT,EAAyBD,cAAzB,EAAyCW,OAAzC"},"metadata":{},"sourceType":"module"}