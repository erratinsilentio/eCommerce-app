{"ast":null,"code":"import { __assign, __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { ApolloConsumer } from \"../context/index.js\";\n\nfunction getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function withApollo(WrappedComponent, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var withDisplayName = \"withApollo(\".concat(getDisplayName(WrappedComponent), \")\");\n\n  var WithApollo = function (_super) {\n    __extends(WithApollo, _super);\n\n    function WithApollo(props) {\n      var _this = _super.call(this, props) || this;\n\n      _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n      return _this;\n    }\n\n    WithApollo.prototype.getWrappedInstance = function () {\n      __DEV__ ? invariant(operationOptions.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\") : invariant(operationOptions.withRef, 30);\n      return this.wrappedInstance;\n    };\n\n    WithApollo.prototype.setWrappedInstance = function (ref) {\n      this.wrappedInstance = ref;\n    };\n\n    WithApollo.prototype.render = function () {\n      var _this = this;\n\n      return React.createElement(ApolloConsumer, null, function (client) {\n        var props = Object.assign({}, _this.props, {\n          client: client,\n          ref: operationOptions.withRef ? _this.setWrappedInstance : undefined\n        });\n        return React.createElement(WrappedComponent, __assign({}, props));\n      });\n    };\n\n    WithApollo.displayName = withDisplayName;\n    WithApollo.WrappedComponent = WrappedComponent;\n    return WithApollo;\n  }(React.Component);\n\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAA0B,kCAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,oBAAP,MAAiC,yBAAjC;AAEA,SAASC,cAAT,QAA+B,qBAA/B;;AAGA,SAASC,cAAT,CAA2BC,gBAA3B,EAAmE;EACjE,OAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD;;AAED,OAAM,SAAUC,UAAV,CACJH,gBADI,EAIJI,gBAJI,EAImD;EAAvD;IAAAA;EAAuD;;EAEvD,IAAMC,eAAe,GAAG,qBAAcN,cAAc,CAACC,gBAAD,CAA5B,EAA8C,GAA9C,CAAxB;;EAEA;IAAyBM;;IAOvB,oBAAYC,KAAZ,EAAyC;MAAzC,YACEC,kBAAMD,KAAN,KAAY,IADd;;MAEEE,KAAI,CAACC,kBAAL,GAA0BD,KAAI,CAACC,kBAAL,CAAwBC,IAAxB,CAA6BF,KAA7B,CAA1B;;IACD;;IAEDG;MACEC,UACElB,0BACA,QADA,EACA,yDACE,kCAFF,CADF,GAIEA,uCAJF;MAMA,OAAO,KAAKmB,eAAZ;IACD,CARD;;IAUAF,oDAAmBG,GAAnB,EAAqE;MACnE,KAAKD,eAAL,GAAuBC,GAAvB;IACD,CAFD;;IAIAH;MAAA;;MACE,OACEhB,oBAACE,cAAD,EAAe,IAAf,EACG,kBAAM;QACL,IAAMS,KAAK,GAAGS,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBR,KAAI,CAACF,KAAvB,EAA8B;UAC1CW,MAAM,QADoC;UAE1CH,GAAG,EAAEX,gBAAgB,CAACe,OAAjB,GACDV,KAAI,CAACC,kBADJ,GAEDU;QAJsC,CAA9B,CAAd;QAMA,OAAOxB,oBAACI,gBAAD,EAAiBqB,aAAKd,KAAL,CAAjB,CAAP;MACD,CATH,CADF;IAaD,CAdD;;IAzBOK,yBAAcP,eAAd;IACAO,8BAAmBZ,gBAAnB;IAuCT;EAAC,CAzCD,CAAyBJ,KAAK,CAAC0B,SAA/B;;EA4CA,OAAOzB,oBAAoB,CAACe,UAAD,EAAaZ,gBAAb,EAA+B,EAA/B,CAA3B;AACD","names":["invariant","React","hoistNonReactStatics","ApolloConsumer","getDisplayName","WrappedComponent","displayName","name","withApollo","operationOptions","withDisplayName","__extends","props","_super","_this","setWrappedInstance","bind","WithApollo","__DEV__","wrappedInstance","ref","Object","assign","client","withRef","undefined","__assign","Component"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/node_modules/@apollo/src/react/hoc/withApollo.tsx"],"sourcesContent":["import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { ApolloConsumer } from '../context';\nimport { OperationOption, WithApolloClient } from './types';\n\nfunction getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function withApollo<TProps, TResult = any>(\n  WrappedComponent: React.ComponentType<\n    WithApolloClient<Omit<TProps, 'client'>>\n  >,\n  operationOptions: OperationOption<TProps, TResult> = {}\n): React.ComponentClass<Omit<TProps, 'client'>> {\n  const withDisplayName = `withApollo(${getDisplayName(WrappedComponent)})`;\n\n  class WithApollo extends React.Component<Omit<TProps, 'client'>> {\n    static displayName = withDisplayName;\n    static WrappedComponent = WrappedComponent;\n\n    // wrapped instance\n    private wrappedInstance: any;\n\n    constructor(props: Omit<TProps, 'client'>) {\n      super(props);\n      this.setWrappedInstance = this.setWrappedInstance.bind(this);\n    }\n\n    getWrappedInstance() {\n      invariant(\n        operationOptions.withRef,\n        `To access the wrapped instance, you need to specify ` +\n          `{ withRef: true } in the options`\n      );\n\n      return this.wrappedInstance;\n    }\n\n    setWrappedInstance(ref: React.ComponentType<WithApolloClient<TProps>>) {\n      this.wrappedInstance = ref;\n    }\n\n    render() {\n      return (\n        <ApolloConsumer>\n          {client => {\n            const props = Object.assign({}, this.props, {\n              client,\n              ref: operationOptions.withRef\n                ? this.setWrappedInstance\n                : undefined\n            });\n            return <WrappedComponent {...props} />;\n          }}\n        </ApolloConsumer>\n      );\n    }\n  }\n\n  // Make sure we preserve any custom statics on the original component.\n  return hoistNonReactStatics(WithApollo, WrappedComponent, {});\n}\n"]},"metadata":{},"sourceType":"module"}