{"ast":null,"code":"var _jsxFileName = \"/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/App.js\";\nimport React, { PureComponent } from \"react\";\nimport './App.css';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Query } from '@apollo/client/react/components';\nimport { graphql } from '@apollo/client/react/hoc';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { newData } from \"./data\";\nimport { GET_DATA } from \"./data\";\nimport fetchData from \"./fetch\";\nimport { render } from \"@testing-library/react\";\nimport { request } from 'graphql-request';\nimport { responsePathAsArray } from \"graphql\";\nimport { toHaveDisplayValue } from \"@testing-library/jest-dom/dist/matchers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: _ref => {\n    let {\n      networkError,\n      graphQLErrors\n    } = _ref;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.getData = async () => {\n      let res = await client.query({\n        query: GET_DATA\n      });\n      let data = await res;\n      this.setState({\n        data\n      });\n      return data;\n    };\n\n    this.state = {\n      data: []\n    };\n  }\n\n  componentDidMount() {\n    this.getData();\n  }\n\n  render() {\n    const data = this.state;\n    console.log(data);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Render data here ...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","PureComponent","useQuery","gql","Query","graphql","ApolloClient","InMemoryCache","newData","GET_DATA","fetchData","render","request","responsePathAsArray","toHaveDisplayValue","client","uri","cache","onError","networkError","graphQLErrors","console","log","App","constructor","props","getData","res","query","data","setState","state","componentDidMount"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/App.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport './App.css';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Query } from '@apollo/client/react/components';\nimport { graphql } from '@apollo/client/react/hoc';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { newData } from \"./data\";\nimport { GET_DATA } from \"./data\";\nimport fetchData from \"./fetch\";\nimport { render } from \"@testing-library/react\";\nimport { request } from 'graphql-request';\nimport { responsePathAsArray } from \"graphql\";\nimport { toHaveDisplayValue } from \"@testing-library/jest-dom/dist/matchers\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n});\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n    };\n  }\n\n  getData = async () => {\n    let res = await client.query({\n      query: GET_DATA\n    })\n    let data = await res;\n    this.setState({data})\n    return data;\n  }\n  \n  componentDidMount() {\n    this.getData()\n  }  \n\n  render() {\n    const data = this.state\n    console.log(data)\n    return <div>Render data here ...</div>;\n  }\n\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,QAAT,QAAyB,QAAzB;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,kBAAT,QAAmC,yCAAnC;;AAEA,MAAMC,MAAM,GAAG,IAAIT,YAAJ,CAAiB;EAC9BU,GAAG,EAAE,wBADyB;EAE9BC,KAAK,EAAE,IAAIV,aAAJ,EAFuB;EAG9BW,OAAO,EAAE,QAAqC;IAAA,IAApC;MAAEC,YAAF;MAAgBC;IAAhB,CAAoC;IAC5CC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;IACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;EACD;AAN6B,CAAjB,CAAf;;AASA,MAAMI,GAAN,SAAkBtB,aAAlB,CAAgC;EAE9BuB,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAOnBC,OAPmB,GAOT,YAAY;MACpB,IAAIC,GAAG,GAAG,MAAMZ,MAAM,CAACa,KAAP,CAAa;QAC3BA,KAAK,EAAEnB;MADoB,CAAb,CAAhB;MAGA,IAAIoB,IAAI,GAAG,MAAMF,GAAjB;MACA,KAAKG,QAAL,CAAc;QAACD;MAAD,CAAd;MACA,OAAOA,IAAP;IACD,CAdkB;;IAEjB,KAAKE,KAAL,GAAa;MACXF,IAAI,EAAE;IADK,CAAb;EAGD;;EAWDG,iBAAiB,GAAG;IAClB,KAAKN,OAAL;EACD;;EAEDf,MAAM,GAAG;IACP,MAAMkB,IAAI,GAAG,KAAKE,KAAlB;IACAV,OAAO,CAACC,GAAR,CAAYO,IAAZ;IACA,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;AA1B6B;;AA8BhC,eAAeN,GAAf"},"metadata":{},"sourceType":"module"}