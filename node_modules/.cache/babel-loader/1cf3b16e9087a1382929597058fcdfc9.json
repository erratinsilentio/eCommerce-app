{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { invariant } from \"../../utilities/globals/index.js\";\nimport * as React from 'react';\nexport var defaultMapPropsToOptions = function () {\n  return {};\n};\nexport var defaultMapResultToProps = function (props) {\n  return props;\n};\nexport var defaultMapPropsToSkip = function () {\n  return false;\n};\nexport function getDisplayName(WrappedComponent) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\nexport function calculateVariablesFromProps(operation, props) {\n  var variables = {};\n\n  for (var _i = 0, _a = operation.variables; _i < _a.length; _i++) {\n    var _b = _a[_i],\n        variable = _b.variable,\n        type = _b.type;\n    if (!variable.name || !variable.name.value) continue;\n    var variableName = variable.name.value;\n    var variableProp = props[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n\n  return variables;\n}\n\nvar GraphQLBase = function (_super) {\n  __extends(GraphQLBase, _super);\n\n  function GraphQLBase(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.withRef = false;\n    _this.setWrappedInstance = _this.setWrappedInstance.bind(_this);\n    return _this;\n  }\n\n  GraphQLBase.prototype.getWrappedInstance = function () {\n    __DEV__ ? invariant(this.withRef, \"To access the wrapped instance, you need to specify \" + \"{ withRef: true } in the options\") : invariant(this.withRef, 29);\n    return this.wrappedInstance;\n  };\n\n  GraphQLBase.prototype.setWrappedInstance = function (ref) {\n    this.wrappedInstance = ref;\n  };\n\n  return GraphQLBase;\n}(React.Component);\n\nexport { GraphQLBase };","map":{"version":3,"mappings":";AAAA,SAASA,SAAT,QAA0B,kCAA1B;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AAIA,OAAO,IAAMC,wBAAwB,GAAG;EAAM,OAAC,EAAD;AAAI,CAA3C;AACP,OAAO,IAAMC,uBAAuB,GAAuB,iBAAK;EAAI;AAAK,CAAlE;AACP,OAAO,IAAMC,qBAAqB,GAAG;EAAM;AAAK,CAAzC;AAEP,OAAM,SAAUC,cAAV,CAA4BC,gBAA5B,EAAoE;EACxE,OAAOA,gBAAgB,CAACC,WAAjB,IAAgCD,gBAAgB,CAACE,IAAjD,IAAyD,WAAhE;AACD;AAED,OAAM,SAAUC,2BAAV,CACJC,SADI,EAEJC,KAFI,EAES;EAEb,IAAIC,SAAS,GAAuB,EAApC;;EACA,KAA+B,0BAAS,CAACA,SAAzC,EAA+BC,cAA/B,EAA+BA,IAA/B,EAAoD;IAA3C;IAAA,IAAEC,QAAQ,cAAV;IAAA,IAAYC,IAAI,UAAhB;IACP,IAAI,CAACD,QAAQ,CAACN,IAAV,IAAkB,CAACM,QAAQ,CAACN,IAAT,CAAcQ,KAArC,EAA4C;IAE5C,IAAMC,YAAY,GAAGH,QAAQ,CAACN,IAAT,CAAcQ,KAAnC;IACA,IAAME,YAAY,GAAIP,KAAa,CAACM,YAAD,CAAnC;;IAEA,IAAI,OAAOC,YAAP,KAAwB,WAA5B,EAAyC;MACvCN,SAAS,CAACK,YAAD,CAAT,GAA0BC,YAA1B;MACA;IACD;;IAGD,IAAIH,IAAI,CAACI,IAAL,KAAc,aAAlB,EAAiC;MAC/BP,SAAS,CAACK,YAAD,CAAT,GAA0BG,SAA1B;IACD;EACF;;EACD,OAAOR,SAAP;AACD;;AAOD;EAIUS;;EAKR,qBAAYV,KAAZ,EAAyB;IAAzB,YACEW,kBAAMX,KAAN,KAAY,IADd;;IAJOY,gBAAmB,KAAnB;IAMLA,KAAI,CAACC,kBAAL,GAA0BD,KAAI,CAACC,kBAAL,CAAwBC,IAAxB,CAA6BF,KAA7B,CAA1B;;EACD;;EAEDG;IACEC,UACE3B,SAAK,MACL4B,OADK,EACL,yDACE,kCAFG,CADP,GAIE5B,2BAJF;IAMA,OAAO,KAAK6B,eAAZ;EACD,CARD;;EAUAH,qDAAmBI,GAAnB,EAAyD;IACvD,KAAKD,eAAL,GAAuBC,GAAvB;EACD,CAFD;;EAGF;AAAC,CA3BD,CAIU7B,KAAK,CAAC8B,SAJhB","names":["invariant","React","defaultMapPropsToOptions","defaultMapResultToProps","defaultMapPropsToSkip","getDisplayName","WrappedComponent","displayName","name","calculateVariablesFromProps","operation","props","variables","_i","variable","type","value","variableName","variableProp","kind","undefined","__extends","_super","_this","setWrappedInstance","bind","GraphQLBase","__DEV__","withRef","wrappedInstance","ref","Component"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/node_modules/@apollo/src/react/hoc/hoc-utils.tsx"],"sourcesContent":["import { invariant } from '../../utilities/globals';\nimport * as React from 'react';\nimport { OperationVariables } from '../../core';\nimport { IDocumentDefinition } from '../parser';\n\nexport const defaultMapPropsToOptions = () => ({});\nexport const defaultMapResultToProps: <P>(props: P) => P = props => props;\nexport const defaultMapPropsToSkip = () => false;\n\nexport function getDisplayName<P>(WrappedComponent: React.ComponentType<P>) {\n  return WrappedComponent.displayName || WrappedComponent.name || 'Component';\n}\n\nexport function calculateVariablesFromProps<TProps>(\n  operation: IDocumentDefinition,\n  props: TProps\n) {\n  let variables: OperationVariables = {};\n  for (let { variable, type } of operation.variables) {\n    if (!variable.name || !variable.name.value) continue;\n\n    const variableName = variable.name.value;\n    const variableProp = (props as any)[variableName];\n\n    if (typeof variableProp !== 'undefined') {\n      variables[variableName] = variableProp;\n      continue;\n    }\n\n    // Allow optional props\n    if (type.kind !== 'NonNullType') {\n      variables[variableName] = undefined;\n    }\n  }\n  return variables;\n}\n\nexport type RefSetter<TChildProps> = (\n  ref: React.ComponentClass<TChildProps>\n) => void | void;\n\n// base class for hocs to easily manage refs\nexport class GraphQLBase<\n  TProps,\n  TChildProps,\n  TState = any\n> extends React.Component<TProps, TState> {\n  public withRef: boolean = false;\n  // wrapped instance\n  private wrappedInstance?: React.ComponentClass<TChildProps>;\n\n  constructor(props: TProps) {\n    super(props);\n    this.setWrappedInstance = this.setWrappedInstance.bind(this);\n  }\n\n  getWrappedInstance() {\n    invariant(\n      this.withRef,\n      `To access the wrapped instance, you need to specify ` +\n        `{ withRef: true } in the options`\n    );\n\n    return this.wrappedInstance;\n  }\n\n  setWrappedInstance(ref: React.ComponentClass<TChildProps>) {\n    this.wrappedInstance = ref;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}