{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar extract_files_1 = require(\"extract-files\");\n\nvar form_data_1 = __importDefault(require(\"form-data\"));\n\nvar defaultJsonSerializer_1 = require(\"./defaultJsonSerializer\");\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\n\n\nvar isExtractableFileEnhanced = function (value) {\n  return extract_files_1.isExtractableFile(value) || value !== null && typeof value === 'object' && typeof value.pipe === 'function';\n};\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\n\n\nfunction createRequestBody(query, variables, operationName, jsonSerializer) {\n  if (jsonSerializer === void 0) {\n    jsonSerializer = defaultJsonSerializer_1.defaultJsonSerializer;\n  }\n\n  var _a = extract_files_1.extractFiles({\n    query: query,\n    variables: variables,\n    operationName: operationName\n  }, '', isExtractableFileEnhanced),\n      clone = _a.clone,\n      files = _a.files;\n\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone);\n    }\n\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n      throw new Error('Cannot create request body with given variable type, array expected');\n    } // Batch support\n\n\n    var payload = query.reduce(function (accu, currentQuery, index) {\n      accu.push({\n        query: currentQuery,\n        variables: variables ? variables[index] : undefined\n      });\n      return accu;\n    }, []);\n    return jsonSerializer.stringify(payload);\n  }\n\n  var Form = typeof FormData === 'undefined' ? form_data_1.default : FormData;\n  var form = new Form();\n  form.append('operations', jsonSerializer.stringify(clone));\n  var map = {};\n  var i = 0;\n  files.forEach(function (paths) {\n    map[++i] = paths;\n  });\n  form.append('map', jsonSerializer.stringify(map));\n  i = 0;\n  files.forEach(function (paths, file) {\n    form.append(\"\" + ++i, file);\n  });\n  return form;\n}\n\nexports.default = createRequestBody;","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA;;AACA;;AACA;AAIA;;;;;;AAIA,IAAMA,yBAAyB,GAAG,UAACC,KAAD,EAAW;EAC3C,yCAAkBA,KAAlB,KACCA,KAAK,KAAK,IAAV,IAAkB,OAAOA,KAAP,KAAiB,QAAnC,IAA+C,OAAOA,KAAK,CAACC,IAAb,KAAsB,UADtE;AACiF,CAFnF;AAIA;;;;;;;AAKA,SAAwBC,iBAAxB,CACEC,KADF,EAEEC,SAFF,EAGEC,aAHF,EAIEC,cAJF,EAIwC;EAAtC;IAAAA,iBAAiBC,6CAAjB;EAAsC;;EAEhC,SAAmBC,6BAAa;IAAEL,KAAK,OAAP;IAASC,SAAS,WAAlB;IAAoBC,aAAa;EAAjC,CAAb,EAAkD,EAAlD,EAAsDN,yBAAtD,CAAnB;EAAA,IAAEU,KAAK,WAAP;EAAA,IAASC,KAAK,WAAd;;EAEN,IAAIA,KAAK,CAACC,IAAN,KAAe,CAAnB,EAAsB;IACpB,IAAI,CAACC,KAAK,CAACC,OAAN,CAAcV,KAAd,CAAL,EAA2B;MACzB,OAAOG,cAAc,CAACQ,SAAf,CAAyBL,KAAzB,CAAP;IACD;;IAED,IAAI,OAAOL,SAAP,KAAqB,WAArB,IAAoC,CAACQ,KAAK,CAACC,OAAN,CAAcT,SAAd,CAAzC,EAAmE;MACjE,MAAM,IAAIW,KAAJ,CAAU,qEAAV,CAAN;IACD,CAPmB,CASpB;;;IACA,IAAMC,OAAO,GAAGb,KAAK,CAACc,MAAN,CACd,UAACC,IAAD,EAAOC,YAAP,EAAqBC,KAArB,EAA0B;MACxBF,IAAI,CAACG,IAAL,CAAU;QAAElB,KAAK,EAAEgB,YAAT;QAAuBf,SAAS,EAAEA,SAAS,GAAGA,SAAS,CAACgB,KAAD,CAAZ,GAAsBE;MAAjE,CAAV;MACA,OAAOJ,IAAP;IACD,CAJa,EAKd,EALc,CAAhB;IAQA,OAAOZ,cAAc,CAACQ,SAAf,CAAyBE,OAAzB,CAAP;EACD;;EAED,IAAMO,IAAI,GAAG,OAAOC,QAAP,KAAoB,WAApB,GAAkCC,mBAAlC,GAAiDD,QAA9D;EAEA,IAAME,IAAI,GAAG,IAAIH,IAAJ,EAAb;EAEAG,IAAI,CAACC,MAAL,CAAY,YAAZ,EAA0BrB,cAAc,CAACQ,SAAf,CAAyBL,KAAzB,CAA1B;EAEA,IAAMmB,GAAG,GAAgC,EAAzC;EACA,IAAIC,CAAC,GAAG,CAAR;EACAnB,KAAK,CAACoB,OAAN,CAAc,UAACC,KAAD,EAAM;IAClBH,GAAG,CAAC,EAAEC,CAAH,CAAH,GAAWE,KAAX;EACD,CAFD;EAGAL,IAAI,CAACC,MAAL,CAAY,KAAZ,EAAmBrB,cAAc,CAACQ,SAAf,CAAyBc,GAAzB,CAAnB;EAEAC,CAAC,GAAG,CAAJ;EACAnB,KAAK,CAACoB,OAAN,CAAc,UAACC,KAAD,EAAQC,IAAR,EAAY;IACxBN,IAAI,CAACC,MAAL,CAAY,KAAG,EAAEE,CAAjB,EAAsBG,IAAtB;EACD,CAFD;EAIA,OAAON,IAAP;AACD;;AAhDDO","names":["isExtractableFileEnhanced","value","pipe","createRequestBody","query","variables","operationName","jsonSerializer","defaultJsonSerializer_1","extract_files_1","clone","files","size","Array","isArray","stringify","Error","payload","reduce","accu","currentQuery","index","push","undefined","Form","FormData","form_data_1","form","append","map","i","forEach","paths","file","exports"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/node_modules/graphql-request/src/createRequestBody.ts"],"sourcesContent":["import { isExtractableFile, extractFiles, ExtractableFile } from 'extract-files'\nimport FormDataNode from 'form-data'\nimport { defaultJsonSerializer } from './defaultJsonSerializer'\n\nimport { Variables } from './types'\n\n/**\n * Duck type if NodeJS stream\n * https://github.com/sindresorhus/is-stream/blob/3750505b0727f6df54324784fe369365ef78841e/index.js#L3\n */\nconst isExtractableFileEnhanced = (value: any): value is ExtractableFile | { pipe: Function } =>\n  isExtractableFile(value) ||\n  (value !== null && typeof value === 'object' && typeof value.pipe === 'function')\n\n/**\n * Returns Multipart Form if body contains files\n * (https://github.com/jaydenseric/graphql-multipart-request-spec)\n * Otherwise returns JSON\n */\nexport default function createRequestBody(\n  query: string | string[],\n  variables?: Variables | Variables[],\n  operationName?: string,\n  jsonSerializer = defaultJsonSerializer\n): string | FormData {\n  const { clone, files } = extractFiles({ query, variables, operationName }, '', isExtractableFileEnhanced)\n\n  if (files.size === 0) {\n    if (!Array.isArray(query)) {\n      return jsonSerializer.stringify(clone)\n    }\n\n    if (typeof variables !== 'undefined' && !Array.isArray(variables)) {\n      throw new Error('Cannot create request body with given variable type, array expected')\n    }\n\n    // Batch support\n    const payload = query.reduce<{ query: string; variables: Variables | undefined }[]>(\n      (accu, currentQuery, index) => {\n        accu.push({ query: currentQuery, variables: variables ? variables[index] : undefined })\n        return accu\n      },\n      []\n    )\n\n    return jsonSerializer.stringify(payload)\n  }\n\n  const Form = typeof FormData === 'undefined' ? FormDataNode : FormData\n\n  const form = new Form()\n\n  form.append('operations', jsonSerializer.stringify(clone))\n\n  const map: { [key: number]: string[] } = {}\n  let i = 0\n  files.forEach((paths) => {\n    map[++i] = paths\n  })\n  form.append('map', jsonSerializer.stringify(map))\n\n  i = 0\n  files.forEach((paths, file) => {\n    form.append(`${++i}`, file as any)\n  })\n\n  return form as FormData\n}\n"]},"metadata":{},"sourceType":"script"}