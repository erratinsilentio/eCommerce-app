{"ast":null,"code":"import { parser, DocumentType } from \"../parser/index.js\";\nimport { withQuery } from \"./query-hoc.js\";\nimport { withMutation } from \"./mutation-hoc.js\";\nimport { withSubscription } from \"./subscription-hoc.js\";\nexport function graphql(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}","map":{"version":3,"mappings":"AAEA,SAASA,MAAT,EAAiBC,YAAjB,QAAqC,oBAArC;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,gBAAT,QAAiC,uBAAjC;AAGA,OAAM,SAAUC,OAAV,CAOJC,QAPI,EAQJC,gBARI,EAaE;EALN;IAAAA;EAKM;;EAIN,QAAQP,MAAM,CAACM,QAAD,CAAN,CAAiBE,IAAzB;IACE,KAAKP,YAAY,CAACQ,QAAlB;MACE,OAAON,YAAY,CAACG,QAAD,EAAWC,gBAAX,CAAnB;;IACF,KAAKN,YAAY,CAACS,YAAlB;MACE,OAAON,gBAAgB,CAACE,QAAD,EAAWC,gBAAX,CAAvB;;IACF,KAAKN,YAAY,CAACU,KAAlB;IACA;MACE,OAAOT,SAAS,CAACI,QAAD,EAAWC,gBAAX,CAAhB;EAPJ;AASD","names":["parser","DocumentType","withQuery","withMutation","withSubscription","graphql","document","operationOptions","type","Mutation","Subscription","Query"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/node_modules/@apollo/src/react/hoc/graphql.tsx"],"sourcesContent":["import { DocumentNode } from 'graphql';\n\nimport { parser, DocumentType } from '../parser';\nimport { withQuery } from './query-hoc';\nimport { withMutation } from './mutation-hoc';\nimport { withSubscription } from './subscription-hoc';\nimport { OperationOption, DataProps, MutateProps } from './types';\n\nexport function graphql<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = Partial<DataProps<TData, TGraphQLVariables>> &\n    Partial<MutateProps<TData, TGraphQLVariables>>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n): (\n  WrappedComponent: React.ComponentType<TProps & TChildProps>\n) => React.ComponentClass<TProps> {\n  switch (parser(document).type) {\n    case DocumentType.Mutation:\n      return withMutation(document, operationOptions);\n    case DocumentType.Subscription:\n      return withSubscription(document, operationOptions);\n    case DocumentType.Query:\n    default:\n      return withQuery(document, operationOptions);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}