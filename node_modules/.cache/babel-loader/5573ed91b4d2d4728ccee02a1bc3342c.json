{"ast":null,"code":"import { gql } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\n\nconst axios = require(\"axios\");\n\nconst endpoint = \"http://localhost:4000/\";\nconst headers = {\n  \"content-type\": \"application/json\"\n};\nconst graphqlQuery = {\n  \"operationName\": \"fetchAuthor\",\n  \"query\": GET_DATA,\n  \"variables\": {}\n};\nconst response = axios({\n  url: endpoint,\n  method: 'get',\n  headers: headers,\n  data: graphqlQuery\n});\nconsole.log(response.data); // data\n\nconsole.log(response.errors); // errors if any\n\nconst URL = 'http://localhost:4000/';\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: _ref => {\n    let {\n      networkError,\n      graphQLErrors\n    } = _ref;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\nconst GET_DATA = gql`\nquery GetData {\n    categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }\n`;\nconst newData = client.query({\n  query: gql`\n    query GetData {\n        categories {\n        name\n        products{\n          name\n          id\n          category\n          inStock\n          description\n          brand\n          gallery\n          attributes{\n           name\n            id\n            type\n            items{\n              id\n              value\n              displayValue\n            }\n          }\n          prices{\n            currency{\n              label\n              symbol\n            }\n            amount\n            \n          } \n        }\n      }\n    \n        currencies{\n          label\n          symbol\n        }\n      }\n    `\n}).then(result => console.log(result));\nconst dataQuery = `\n  categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }`;\n\nconst fetchData = async () => {\n  const result = await fetch(URL, {\n    method: \"POST\",\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify({\n      query: dataQuery\n    })\n  });\n  const resultData = await result.json();\n  const finalData = await resultData.data;\n  return finalData;\n};\n\nconst getAll = () => {\n  const request = axios.get(baseUrl);\n  return request.then(response => response.data);\n};\n\nexport { GET_DATA, newData, fetchData };","map":{"version":3,"names":["gql","ApolloClient","InMemoryCache","ApolloProvider","axios","require","endpoint","headers","graphqlQuery","GET_DATA","response","url","method","data","console","log","errors","URL","client","uri","cache","onError","networkError","graphQLErrors","newData","query","then","result","dataQuery","fetchData","fetch","body","JSON","stringify","resultData","json","finalData","getAll","request","get","baseUrl"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/data.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport { ApolloClient, InMemoryCache, ApolloProvider } from '@apollo/client';\nconst axios = require(\"axios\");\n\nconst endpoint = \"http://localhost:4000/\";\nconst headers = {\n\t\"content-type\": \"application/json\",\n};\nconst graphqlQuery = {\n    \"operationName\": \"fetchAuthor\",\n    \"query\": GET_DATA,\n    \"variables\": {}\n};\n\nconst response = axios({\n  url: endpoint,\n  method: 'get',\n  headers: headers,\n  data: graphqlQuery\n});\n\nconsole.log(response.data); // data\nconsole.log(response.errors); // errors if any\n\nconst URL = 'http://localhost:4000/';\n\nconst client = new ApolloClient({\n    uri: 'http://localhost:4000/',\n    cache: new InMemoryCache(),\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log('graphQLErrors', graphQLErrors)\n      console.log('networkError', networkError)\n    }\n  });\n\nconst GET_DATA = gql`\nquery GetData {\n    categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }\n`;\n\n\nconst newData =\nclient\n  .query({\n    query: gql`\n    query GetData {\n        categories {\n        name\n        products{\n          name\n          id\n          category\n          inStock\n          description\n          brand\n          gallery\n          attributes{\n           name\n            id\n            type\n            items{\n              id\n              value\n              displayValue\n            }\n          }\n          prices{\n            currency{\n              label\n              symbol\n            }\n            amount\n            \n          } \n        }\n      }\n    \n        currencies{\n          label\n          symbol\n        }\n      }\n    `,\n  })\n  .then(result => console.log(result))\n\n\n  const dataQuery = `\n  categories {\n    name\n    products{\n      name\n      id\n      category\n      inStock\n      description\n      brand\n      gallery\n      attributes{\n       name\n        id\n        type\n        items{\n          id\n          value\n          displayValue\n        }\n      }\n      prices{\n        currency{\n          label\n          symbol\n        }\n        amount\n        \n      } \n    }\n  }\n\n    currencies{\n      label\n      symbol\n    }\n  }`\n\n  const fetchData = async () => {\n    const result = await fetch(URL, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n  \n      body: JSON.stringify({\n        query: dataQuery,\n      }),\n    });\n  \n    const resultData = await result.json();\n    const finalData = await resultData.data;\n    return finalData;\n  };\n\n  const getAll = () => {\n    const request = axios.get(baseUrl);\n    return request.then((response) => response.data);\n  };\n  \n\n\nexport  {GET_DATA, newData, fetchData};"],"mappings":"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"},"metadata":{},"sourceType":"module"}