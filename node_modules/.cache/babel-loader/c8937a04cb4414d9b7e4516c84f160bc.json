{"ast":null,"code":"var _jsxFileName = \"/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/App.js\";\nimport React, { PureComponent } from \"react\";\nimport './App.css';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Query } from '@apollo/client/react/components';\nimport { graphql } from '@apollo/client/react/hoc';\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { newData } from \"./data\";\nimport { GET_CATEGORIES, GET_CURRENCIES } from \"./data\";\nimport fetchData from \"./fetch\";\nimport { render } from \"@testing-library/react\";\nimport { request } from 'graphql-request';\nimport { responsePathAsArray } from \"graphql\";\nimport { toHaveDisplayValue } from \"@testing-library/jest-dom/dist/matchers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: _ref => {\n    let {\n      networkError,\n      graphQLErrors\n    } = _ref;\n    console.log('graphQLErrors', graphQLErrors);\n    console.log('networkError', networkError);\n  }\n});\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.getCurrencies = async () => {\n      let res = await client.query({\n        query: GET_CURRENCIES\n      });\n      let data = await res;\n      let currencies = data.data.currencies;\n      this.setState({\n        currencies: currencies\n      });\n      return currencies;\n    };\n\n    this.state = {\n      currencies: [],\n      categories: []\n    };\n  }\n\n  componentDidMount() {\n    this.getCurrencies();\n  }\n\n  render() {\n    if (!this.state.currencies[0]) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"loading...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 14\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: this.state.currencies.map(item => {\n        /*#__PURE__*/\n        _jsxDEV(\"li\", {\n          children: item\n        }, item.symbol, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"names":["React","PureComponent","useQuery","gql","Query","graphql","ApolloClient","InMemoryCache","newData","GET_CATEGORIES","GET_CURRENCIES","fetchData","render","request","responsePathAsArray","toHaveDisplayValue","client","uri","cache","onError","networkError","graphQLErrors","console","log","App","constructor","props","getCurrencies","res","query","data","currencies","setState","state","categories","componentDidMount","map","item","symbol"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/src/App.js"],"sourcesContent":["import React, { PureComponent } from \"react\";\nimport './App.css';\nimport { useQuery, gql } from \"@apollo/client\";\nimport { Query } from '@apollo/client/react/components';\nimport { graphql } from '@apollo/client/react/hoc';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\nimport { newData } from \"./data\";\nimport { GET_CATEGORIES, GET_CURRENCIES } from \"./data\";\nimport fetchData from \"./fetch\";\nimport { render } from \"@testing-library/react\";\nimport { request } from 'graphql-request';\nimport { responsePathAsArray } from \"graphql\";\nimport { toHaveDisplayValue } from \"@testing-library/jest-dom/dist/matchers\";\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/',\n  cache: new InMemoryCache(),\n  onError: ({ networkError, graphQLErrors }) => {\n    console.log('graphQLErrors', graphQLErrors)\n    console.log('networkError', networkError)\n  }\n});\n\nclass App extends PureComponent {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currencies: [],\n      categories: []\n    };\n  }\n\n  getCurrencies = async () => {\n    let res = await client.query({\n      query: GET_CURRENCIES\n    })\n    let data = await res;\n    let currencies = data.data.currencies\n    this.setState({currencies: currencies})\n\n    return currencies;\n  }\n  \n  componentDidMount() {\n    this.getCurrencies()\n  }  \n\n  render() {\n    if(!this.state.currencies[0]){\n      return <h1>loading...</h1>\n    }\n\n    return <ul>{this.state.currencies.map(item => {\n      <li key={item.symbol}>{item}</li>\n    })}</ul>;\n  }\n\n}\n\nexport default App;\n"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAO,WAAP;AACA,SAASC,QAAT,EAAmBC,GAAnB,QAA8B,gBAA9B;AACA,SAASC,KAAT,QAAsB,iCAAtB;AACA,SAASC,OAAT,QAAwB,0BAAxB;AAEA,SAASC,YAAT,EAAuBC,aAAvB,QAA4C,gBAA5C;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,SAASC,cAAT,EAAyBC,cAAzB,QAA+C,QAA/C;AACA,OAAOC,SAAP,MAAsB,SAAtB;AACA,SAASC,MAAT,QAAuB,wBAAvB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,mBAAT,QAAoC,SAApC;AACA,SAASC,kBAAT,QAAmC,yCAAnC;;AAEA,MAAMC,MAAM,GAAG,IAAIV,YAAJ,CAAiB;EAC9BW,GAAG,EAAE,wBADyB;EAE9BC,KAAK,EAAE,IAAIX,aAAJ,EAFuB;EAG9BY,OAAO,EAAE,QAAqC;IAAA,IAApC;MAAEC,YAAF;MAAgBC;IAAhB,CAAoC;IAC5CC,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BF,aAA7B;IACAC,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BH,YAA5B;EACD;AAN6B,CAAjB,CAAf;;AASA,MAAMI,GAAN,SAAkBvB,aAAlB,CAAgC;EAE9BwB,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;;IADiB,KAQnBC,aARmB,GAQH,YAAY;MAC1B,IAAIC,GAAG,GAAG,MAAMZ,MAAM,CAACa,KAAP,CAAa;QAC3BA,KAAK,EAAEnB;MADoB,CAAb,CAAhB;MAGA,IAAIoB,IAAI,GAAG,MAAMF,GAAjB;MACA,IAAIG,UAAU,GAAGD,IAAI,CAACA,IAAL,CAAUC,UAA3B;MACA,KAAKC,QAAL,CAAc;QAACD,UAAU,EAAEA;MAAb,CAAd;MAEA,OAAOA,UAAP;IACD,CAjBkB;;IAEjB,KAAKE,KAAL,GAAa;MACXF,UAAU,EAAE,EADD;MAEXG,UAAU,EAAE;IAFD,CAAb;EAID;;EAaDC,iBAAiB,GAAG;IAClB,KAAKR,aAAL;EACD;;EAEDf,MAAM,GAAG;IACP,IAAG,CAAC,KAAKqB,KAAL,CAAWF,UAAX,CAAsB,CAAtB,CAAJ,EAA6B;MAC3B,oBAAO;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAP;IACD;;IAED,oBAAO;MAAA,UAAK,KAAKE,KAAL,CAAWF,UAAX,CAAsBK,GAAtB,CAA0BC,IAAI,IAAI;QAC5C;QAAA;UAAA,UAAuBA;QAAvB,GAASA,IAAI,CAACC,MAAd;UAAA;UAAA;UAAA;QAAA;MACD,CAFW;IAAL;MAAA;MAAA;MAAA;IAAA,QAAP;EAGD;;AAjC6B;;AAqChC,eAAed,GAAf"},"metadata":{},"sourceType":"module"}