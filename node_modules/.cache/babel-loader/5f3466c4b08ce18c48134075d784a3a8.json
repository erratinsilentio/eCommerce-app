{"ast":null,"code":"import { __assign, __extends, __rest } from \"tslib\";\nimport * as React from 'react';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\nimport { parser } from \"../parser/index.js\";\nimport { Subscription } from \"../components/index.js\";\nimport { getDisplayName, GraphQLBase, calculateVariablesFromProps, defaultMapPropsToOptions, defaultMapPropsToSkip } from \"./hoc-utils.js\";\nexport function withSubscription(document, operationOptions) {\n  if (operationOptions === void 0) {\n    operationOptions = {};\n  }\n\n  var operation = parser(document);\n  var _a = operationOptions.options,\n      options = _a === void 0 ? defaultMapPropsToOptions : _a,\n      _b = operationOptions.skip,\n      skip = _b === void 0 ? defaultMapPropsToSkip : _b,\n      _c = operationOptions.alias,\n      alias = _c === void 0 ? 'Apollo' : _c,\n      shouldResubscribe = operationOptions.shouldResubscribe;\n  var mapPropsToOptions = options;\n  if (typeof mapPropsToOptions !== 'function') mapPropsToOptions = function () {\n    return options;\n  };\n  var mapPropsToSkip = skip;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = function () {\n    return skip;\n  };\n  var lastResultProps;\n  return function (WrappedComponent) {\n    var graphQLDisplayName = \"\".concat(alias, \"(\").concat(getDisplayName(WrappedComponent), \")\");\n\n    var GraphQL = function (_super) {\n      __extends(GraphQL, _super);\n\n      function GraphQL(props) {\n        var _this = _super.call(this, props) || this;\n\n        _this.state = {\n          resubscribe: false\n        };\n        return _this;\n      }\n\n      GraphQL.prototype.updateResubscribe = function (resubscribe) {\n        this.setState({\n          resubscribe: resubscribe\n        });\n      };\n\n      GraphQL.prototype.componentDidUpdate = function (prevProps) {\n        var resubscribe = !!(shouldResubscribe && shouldResubscribe(prevProps, this.props));\n\n        if (this.state.resubscribe !== resubscribe) {\n          this.updateResubscribe(resubscribe);\n        }\n      };\n\n      GraphQL.prototype.render = function () {\n        var _this = this;\n\n        var props = this.props;\n        var shouldSkip = mapPropsToSkip(props);\n        var opts = shouldSkip ? Object.create(null) : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n\n        return React.createElement(Subscription, __assign({}, opts, {\n          displayName: graphQLDisplayName,\n          skip: shouldSkip,\n          subscription: document,\n          shouldResubscribe: this.state.resubscribe\n        }), function (_a) {\n          var _b, _c;\n\n          var data = _a.data,\n              r = __rest(_a, [\"data\"]);\n\n          if (operationOptions.withRef) {\n            _this.withRef = true;\n            props = Object.assign({}, props, {\n              ref: _this.setWrappedInstance\n            });\n          }\n\n          if (shouldSkip) {\n            return React.createElement(WrappedComponent, __assign({}, props, {}));\n          }\n\n          var result = Object.assign(r, data || {});\n          var name = operationOptions.name || 'data';\n          var childProps = (_b = {}, _b[name] = result, _b);\n\n          if (operationOptions.props) {\n            var newResult = (_c = {}, _c[name] = result, _c.ownProps = props, _c);\n            lastResultProps = operationOptions.props(newResult, lastResultProps);\n            childProps = lastResultProps;\n          }\n\n          return React.createElement(WrappedComponent, __assign({}, props, childProps));\n        });\n      };\n\n      GraphQL.displayName = graphQLDisplayName;\n      GraphQL.WrappedComponent = WrappedComponent;\n      return GraphQL;\n    }(GraphQLBase);\n\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}","map":{"version":3,"mappings":"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","names":["React","hoistNonReactStatics","parser","Subscription","getDisplayName","GraphQLBase","calculateVariablesFromProps","defaultMapPropsToOptions","defaultMapPropsToSkip","withSubscription","document","operationOptions","operation","_a","_b","skip","_c","alias","shouldResubscribe","mapPropsToOptions","options","mapPropsToSkip","lastResultProps","WrappedComponent","graphQLDisplayName","concat","__extends","props","_super","_this","state","resubscribe","GraphQL","setState","prevProps","updateResubscribe","shouldSkip","opts","Object","create","variables","length","__assign","displayName","subscription","r","withRef","assign","ref","setWrappedInstance","result","data","name","childProps","newResult"],"sources":["/Users/kacperkondracki/Desktop/TOP/REACT/scandiweb/node_modules/@apollo/src/react/hoc/subscription-hoc.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DocumentNode } from 'graphql';\nimport hoistNonReactStatics from 'hoist-non-react-statics';\n\nimport { parser } from '../parser';\nimport { BaseQueryOptions } from '../types/types';\nimport { Subscription } from '../components';\nimport {\n  getDisplayName,\n  GraphQLBase,\n  calculateVariablesFromProps,\n  defaultMapPropsToOptions,\n  defaultMapPropsToSkip\n} from './hoc-utils';\nimport { OperationOption, OptionProps, DataProps } from './types';\n\nexport function withSubscription<\n  TProps extends TGraphQLVariables | {} = {},\n  TData = {},\n  TGraphQLVariables = {},\n  TChildProps = DataProps<TData, TGraphQLVariables>\n>(\n  document: DocumentNode,\n  operationOptions: OperationOption<\n    TProps,\n    TData,\n    TGraphQLVariables,\n    TChildProps\n  > = {}\n) {\n  // this is memoized so if coming from `graphql` there is nearly no extra cost\n  const operation = parser(document);\n  // extract options\n  const {\n    options = defaultMapPropsToOptions,\n    skip = defaultMapPropsToSkip,\n    alias = 'Apollo',\n    shouldResubscribe\n  } = operationOptions;\n\n  let mapPropsToOptions = options as (props: any) => BaseQueryOptions;\n  if (typeof mapPropsToOptions !== 'function')\n    mapPropsToOptions = () => options as BaseQueryOptions;\n\n  let mapPropsToSkip = skip as (props: any) => boolean;\n  if (typeof mapPropsToSkip !== 'function') mapPropsToSkip = () => skip as any;\n\n  // allow for advanced referential equality checks\n  let lastResultProps: TChildProps | void;\n  return (\n    WrappedComponent: React.ComponentType<TProps & TChildProps>\n  ): React.ComponentClass<TProps> => {\n    const graphQLDisplayName = `${alias}(${getDisplayName(WrappedComponent)})`;\n    class GraphQL extends GraphQLBase<\n      TProps,\n      TChildProps,\n      { resubscribe: boolean }\n    > {\n      static displayName = graphQLDisplayName;\n      static WrappedComponent = WrappedComponent;\n      constructor(props: TProps) {\n        super(props);\n        this.state = { resubscribe: false };\n      }\n\n      updateResubscribe(resubscribe: boolean) {\n        this.setState({ resubscribe });\n      }\n\n      componentDidUpdate(prevProps: TProps) {\n        const resubscribe = !!(\n          shouldResubscribe &&\n          shouldResubscribe(prevProps, this.props)\n        );\n        if (this.state.resubscribe !== resubscribe) {\n          this.updateResubscribe(resubscribe);\n        }\n      }\n\n      render() {\n        let props = this.props;\n        const shouldSkip = mapPropsToSkip(props);\n        const opts = shouldSkip\n          ? Object.create(null)\n          : mapPropsToOptions(props);\n\n        if (!shouldSkip && !opts.variables && operation.variables.length > 0) {\n          opts.variables = calculateVariablesFromProps(operation, props);\n        }\n        return (\n          <Subscription\n            {...opts}\n            displayName={graphQLDisplayName}\n            skip={shouldSkip}\n            subscription={document}\n            shouldResubscribe={this.state.resubscribe}\n          >\n            {({ data, ...r }: any) => {\n              if (operationOptions.withRef) {\n                this.withRef = true;\n                props = Object.assign({}, props, {\n                  ref: this.setWrappedInstance\n                });\n              }\n              // if we have skipped, no reason to manage any reshaping\n              if (shouldSkip) {\n                return (\n                  <WrappedComponent\n                    {...(props as TProps)}\n                    {...({} as TChildProps)}\n                  />\n                );\n              }\n\n              // the HOC's historically hoisted the data from the execution result\n              // up onto the result since it was passed as a nested prop\n              // we massage the Query components shape here to replicate that\n              const result = Object.assign(r, data || {});\n              const name = operationOptions.name || 'data';\n              let childProps = { [name]: result };\n              if (operationOptions.props) {\n                const newResult: OptionProps<\n                  TProps,\n                  TData,\n                  TGraphQLVariables\n                > = {\n                  [name]: result,\n                  ownProps: props as TProps\n                };\n                lastResultProps = operationOptions.props(\n                  newResult,\n                  lastResultProps\n                );\n                childProps = lastResultProps;\n              }\n\n              return (\n                <WrappedComponent\n                  {...(props as TProps)}\n                  {...(childProps as TChildProps)}\n                />\n              );\n            }}\n          </Subscription>\n        );\n      }\n    }\n\n    // Make sure we preserve any custom statics on the original component.\n    return hoistNonReactStatics(GraphQL, WrappedComponent, {});\n  };\n}\n"]},"metadata":{},"sourceType":"module"}